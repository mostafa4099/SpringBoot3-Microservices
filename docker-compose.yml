services:

  mongodb:
    image: mongo:8.0.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: product
    volumes:
      - ./data/mongodb:/data/db

  mysql:
    image: mysql:9.0.1
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    ports:
      - "3307:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql
      #      To create database within the mysql docker image.
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.7.1
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9094:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'

  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"

  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9095:9090"

  tempo:
    image: grafana/tempo:2.2.2
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./data/tempo:/tmp/tempo
    ports:
      - "3110:3100"  # Tempo
      - "9411:9411" # zipkin

  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"

#  service-discovery:
#    build:
#      context: ./service-discovery
#      dockerfile: Dockerfile
#    container_name: service-discovery
#    ports:
#      - "8761:8761"
#    networks:
#      - microservices-network
#
#  config-server:
#    build:
#      context: ./config-server
#      dockerfile: Dockerfile
#    container_name: config-server
#    depends_on:
#      - service-discovery
#    ports:
#      - "8084:8084"
#    networks:
#      - microservices-network
#
#  auth-service:
#    build:
#      context: ./auth-service
#      dockerfile: Dockerfile
#    container_name: auth-service
#    depends_on:
#      - mysql
#      - service-discovery
#      - config-server
#    networks:
#      - microservices-network
#
#  product-service:
#    build:
#      context: ./product-service
#      dockerfile: Dockerfile
#    container_name: product-service
#    depends_on:
#      - mongodb
#      - service-discovery
#      - config-server
#      - auth-service
#    networks:
#      - microservices-network
#
#  inventory-service:
#    build:
#      context: ./inventory-service
#      dockerfile: Dockerfile
#    container_name: inventory-service
#    depends_on:
#      - mysql
#      - service-discovery
#      - config-server
#      - auth-service
#    networks:
#      - microservices-network
#
#  order-service:
#    build:
#      context: ./order-service
#      dockerfile: Dockerfile
#    container_name: order-service
#    depends_on:
#      - mysql
#      - zookeeper
#      - broker
#      - kafka-ui
#      - service-discovery
#      - config-server
#      - auth-service
#      - inventory-service
#    networks:
#      - microservices-network
#
#  notification-service:
#    build:
#      context: ./notification-service
#      dockerfile: Dockerfile
#    container_name: notification-service
#    depends_on:
#      - zookeeper
#      - broker
#      - kafka-ui
#      - service-discovery
#      - config-server
#    ports:
#      - "8086:8086"
#    networks:
#      - microservices-network
#
#  api-gateway:
#    build:
#      context: ./api-gateway
#      dockerfile: Dockerfile
#    container_name: api-gateway
#    depends_on:
#      - service-discovery
#      - config-server
#      - auth-service
#      - product-service
#      - inventory-service
#      - order-service
#    ports:
#      - "9000:9000"
#    networks:
#      - microservices-network
#
#networks:
#  microservices-network:
#    driver: bridge